[tool.poetry]
name          = "gamovibased"
version       = "0.0.1"
authors       = ["Barricade2 <barri3139@gmail.com>"]
homepage      = "https://gamovibased.com/"
description   = "gamovibased"
repository    = "https://github.com/barricade2/gamovibased"
license       = "Proprietary"
readme        = "README.md"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Web Environment",
  "Framework :: Django :: 4.2",
  "Intended Audience :: End Users/Desktop",
  "License :: Other/Proprietary License",
  "Natural Language :: English",
  "Natural Language :: Russian",
  "Operating System :: OS Independent",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: JavaScript",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
  "Topic :: Internet :: WWW/HTTP :: WSGI :: Application"
]


packages = [
    { include = "src" }
]

[tool.poetry.dependencies]
#package = { git = "https://github.com/package/package.git" }
#package = { path = "../my-package/dist/package-0.1.0.tar.gz" }
#package = { url = "https://example.com/package-0.1.0.tar.gz" }
python = "^3.10"
django = "==3.2.16"
Pillow = "==9.1.0"
django-modeltranslation = "*"
psycopg2 = "*"
django-environ = "^0.10.0"
djangorestframework = "*"
graphene-django = "*"
drf-yasg = "*"
dataclass-wizard = "*"
cinemagoer = "~2023.5.1"
omdb = "~0.10.1"
django-compressor = "*"
django-htmlmin = "*"
pymoviedb = "~0.0.8"
django-mptt = "*"
django-mptt-admin = "*"
gunicorn = "*"
django-model-utils = "*"
django-imagekit = "*"
kinopoisk-dev = "~0.2.0"
sentry-sdk = "*"
django-split-settings = "^1.2.0"
pika = "^1.3.2"
djangorestframework-simplejwt = "^5.3.0"
django-cors-headers = "^4.3.0"
waitress = "^2.1.2"
django-sslserver = "^0.22"

[tool.poetry.group.dev.dependencies]
django-debug-toolbar = "*"
django-dump-load-utf8 = "*"
uvicorn = "*"
mypy = "^1.5.1"
pylint = "^2.17.5"
isort = "^5.12.0"
black = {extras = ["d"], version = "^23.7.0"}
pre-commit = "^3.4.0"
pylint-django = "^2.5.3"
taskipy = "^1.12.0"

[tool.poetry.scripts]
main-scripts = "src.app.main.scripts:start"

[tool.taskipy.settings]
use_vars = true

[tool.taskipy.variables]
NAME_APP = "gamovibased"
WORK_DIR = "/src"
DJ_PROJ = "config"
EXTERNAL_WEB_PORT = "8000"
INTERNAL_WEB_PORT = "8000"
image_name = { var = "{NAME_APP}_img", recursive = true }
web_container_name = { var = "{NAME_APP}_web_cont", recursive = true }
db_container_name = { var = "{NAME_APP}_db_cont", recursive = true }
nginx_container_name = { var = "{NAME_APP}_nginx_cont", recursive = true }
env_path = { var = ".{WORK_DIR}/{DJ_PROJ}/.env", recursive = true }
my_path = { var = "{NAME_APP}", recursive = true }

[tool.taskipy.tasks]
docker_build = { cmd = "docker build --build-arg NAME_APP={NAME_APP} --build-arg WORK_DIR={WORK_DIR} --build-arg DJ_PROJ={DJ_PROJ} -t {image_name} .", help = "Build docker image" }
docker_run = { cmd = "docker run --rm -ti --name {web_container_name} -v {my_path}/deploy:/{NAME_APP}/deploy -p {EXTERNAL_WEB_PORT}:{INTERNAL_WEB_PORT} {image_name}", help = "Run docker image" }
docker_exec_web = { cmd = "docker exec -it {web_container_name} /bin/sh", help = "Run command bash" }
docker_exec_db = { cmd = "docker exec -it {db_container_name} /bin/sh", help = "Run command bash" }
docker_exec_nginx = { cmd = "docker exec -it {nginx_container_name} /bin/sh", help = "Run command bash" }
docker_get_ip_web = { cmd = "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {web_container_name}", help = "Get container ip db" }
docker_get_ip_db = { cmd = "docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' {db_container_name}", help = "Get container ip web" }
docker_compose_build = { cmd = "docker-compose --env-file {env_path} build", help = "Build docker-compose" }
docker_compose_up = { cmd = "docker-compose --env-file {env_path} up && docker-compose --env-file {env_path} rm -fsv", help = "Run docker-compose containers" }
docker_compose_down = { cmd = "docker-compose --env-file {env_path} down", help = "Down docker-compose containers" }
docker_compose_rm = { cmd = "docker-compose --env-file {env_path} rm -fsv", help = "Remove docker-compose containers" }
dj_run = { cmd = "python /{NAME_PROJ}/{WORK_DIR}/manage.py runserver 0.0.0.0:{EXTERNAL_WEB_PORT}", help = "Run django server" }
dj_gunicorn_run = { cmd = "gunicorn --chdir /{NAME_PROJ}/{WORK_DIR} -b 0.0.0.0:{EXTERNAL_WEB_PORT} --preload -c /{NAME_PROJ}/deploy/gunicorn/gunicorn_conf.py", help = "Run gunicorn server" }
dj_gunicorn_run_test = { cmd = "gunicorn --chdir /{NAME_PROJ}/{WORK_DIR} -b 0.0.0.0:{EXTERNAL_WEB_PORT} --preload -c --reload config.wsgi:application", help = "Run gunicorn server" }
dj_makemigrations = { cmd = "python /{NAME_PROJ}/{WORK_DIR}/manage.py makemigrations", help = "Run django makemigrations" }
dj_migrate = { cmd = "python /{NAME_PROJ}/{WORK_DIR}/manage.py migrate", help = "Run django migrate db" }
dj_db = { cmd = "dj_makemigrations && dj_migrate", help = "Run django makemigrations & migrate db" }
dj_dump = { cmd = "python /{NAME_PROJ}/{WORK_DIR}/manage.py dumpdata > /{NAME_PROJ}/{WORK_DIR}/dumpdata.json", help = "Create dumpdata db" }
dj_load = { cmd = "dj_migrate && python /{NAME_PROJ}/{WORK_DIR}/manage.py  flush && python /{NAME_PROJ}/{WORK_DIR}/manage.py loaddata /{NAME_PROJ}/{WORK_DIR}/dumpdata.json", help = "Create dumpdata db" }

#[tool.poetry.plugins."poetry.plugin"]

#[[tool.poetry.source]]
#name = "repo"
#url = "https://my.gitlab.com/projects/1/packages/pypi/simple"
#priority = "supplemental"


# -- setup cfg -- #

# formatter type-safe
[tool.mypy]
#plugins = ["pydantic.mypy", "mypy_django_plugin.main"]
plugins = ["pydantic.mypy"]
follow_imports = "silent"
strict_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
ignore_missing_imports = true

# formatter validation-data
[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# contains type stubs
[tool.django-stubs]
django_settings_module = "config.settings"
strict_settings = false

# formatter import-sort
[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
line_length = 79

# formatter style
[tool.black]
line-length = 79
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.eggs         # exclude a few common directories in the
    | \.git          # root of the project
    | \.hg
    | \.mypy_cache
    | \.tox
    | \.venv
    | \.ini
    | _build
    | buck-out
    | build
    | dist
    |Dockerfile
    |Jenkinfile
  )/
  | foo.py           # also separately exclude a file named foo.py in
                     # the root of the project
)
#'''

# linter
[tool.pylint]
disable = ["C0114", "C0115", "C0116"]   # missing-module-docstring
load-plugins = "pylint_django"
django-settings-module = "config.settings"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

# -- note -- #

# -----------------------------------------
# https://python-poetry.org/docs/pyproject/
# poetry init
# poetry lock --no-update
# poetry install
# poetry shell
# poetry self update
# poetry build
# poetry publish
# poetry show
# poetry config --list
# poetry run my-script
# poetry check
# poetry export --without-hashes --without dev,test -f requirements.txt -o requirements.txt
# poetry export --without-hashes --with dev -f requirements.txt -o requirements.txt

# Allow >=2.0.5, <3.0.0 versions
# poetry add pendulum@^2.0.5
# Allow >=2.0.5, <2.1.0 versions
# poetry add pendulum@~2.0.5
# Allow >=2.0.5 versions, without upper bound
# poetry add "pendulum>=2.0.5"
# Allow only 2.0.5 version
# poetry add pendulum==2.0.5
#poetry remove mkdocs --group docs

# poetry add --source repo package

# poetry config repositories.repo "my.gitlab.com/projects/1/packages/pypi"
# poetry config http-basic.repo <token-name> <secret-token>
# poetry publish --build --repository repo
# -----------------------------------------